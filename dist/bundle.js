!function(g){var I={};function C(A){if(I[A])return I[A].exports;var n=I[A]={i:A,l:!1,exports:{}};return g[A].call(n.exports,n,n.exports,C),n.l=!0,n.exports}C.m=g,C.c=I,C.d=function(g,I,A){C.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:A})},C.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},C.t=function(g,I){if(1&I&&(g=C(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var n in g)C.d(A,n,function(I){return g[I]}.bind(null,n));return A},C.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return C.d(I,"a",I),I},C.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},C.p="",C(C.s=1)}([function(module,exports){eval("exports.endianness = function () { return 'LE' };\n\nexports.hostname = function () {\n    if (typeof location !== 'undefined') {\n        return location.hostname\n    }\n    else return '';\n};\n\nexports.loadavg = function () { return [] };\n\nexports.uptime = function () { return 0 };\n\nexports.freemem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.totalmem = function () {\n    return Number.MAX_VALUE;\n};\n\nexports.cpus = function () { return [] };\n\nexports.type = function () { return 'Browser' };\n\nexports.release = function () {\n    if (typeof navigator !== 'undefined') {\n        return navigator.appVersion;\n    }\n    return '';\n};\n\nexports.networkInterfaces\n= exports.getNetworkInterfaces\n= function () { return {} };\n\nexports.arch = function () { return 'javascript' };\n\nexports.platform = function () { return 'browser' };\n\nexports.tmpdir = exports.tmpDir = function () {\n    return '/tmp';\n};\n\nexports.EOL = '\\n';\n\nexports.homedir = function () {\n\treturn '/'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb3MtYnJvd3NlcmlmeS9icm93c2VyLmpzPzNjNDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCOztBQUUvQiw4QkFBOEI7O0FBRTlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCOztBQUU1Qiw0QkFBNEI7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxVQUFVOztBQUV6Qiw0QkFBNEI7O0FBRTVCLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cy5lbmRpYW5uZXNzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ0xFJyB9O1xuXG5leHBvcnRzLmhvc3RuYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5ob3N0bmFtZVxuICAgIH1cbiAgICBlbHNlIHJldHVybiAnJztcbn07XG5cbmV4cG9ydHMubG9hZGF2ZyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH07XG5cbmV4cG9ydHMudXB0aW1lID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gMCB9O1xuXG5leHBvcnRzLmZyZWVtZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7XG59O1xuXG5leHBvcnRzLnRvdGFsbWVtID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBOdW1iZXIuTUFYX1ZBTFVFO1xufTtcblxuZXhwb3J0cy5jcHVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW10gfTtcblxuZXhwb3J0cy50eXBlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ0Jyb3dzZXInIH07XG5cbmV4cG9ydHMucmVsZWFzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59O1xuXG5leHBvcnRzLm5ldHdvcmtJbnRlcmZhY2VzXG49IGV4cG9ydHMuZ2V0TmV0d29ya0ludGVyZmFjZXNcbj0gZnVuY3Rpb24gKCkgeyByZXR1cm4ge30gfTtcblxuZXhwb3J0cy5hcmNoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ2phdmFzY3JpcHQnIH07XG5cbmV4cG9ydHMucGxhdGZvcm0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnYnJvd3NlcicgfTtcblxuZXhwb3J0cy50bXBkaXIgPSBleHBvcnRzLnRtcERpciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJy90bXAnO1xufTtcblxuZXhwb3J0cy5FT0wgPSAnXFxuJztcblxuZXhwb3J0cy5ob21lZGlyID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gJy8nXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/os-browserify/browser.js\nvar browser = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/flvtag.js\n\r\n\r\nclass FlvTag {\r\n    constructor() {\r\n        this.tagType = -1;\r\n        this.dataSize = -1;\r\n        this.Timestamp = -1;\r\n        this.StreamID = -1;\r\n        this.body = -1;\r\n    }\r\n\r\n    toString() {\r\n        let tagType = '';\r\n        if (this.tagType == 8) {\r\n            tagType = 'Audio'\r\n        } else if (this.tagType == 9) {\r\n            tagType = 'Video'\r\n        } else if (this.tagType == 18) {\r\n            tagType = \"scripts\"\r\n        }\r\n\r\n        return `tag:${tagType};\r\n        dataSize:${this.hexTypeArray2int(this.dataSize)};\r\n        timestamp:${this.hexTypeArray2int(this.Timestamp)};\r\n        streamId:${this.hexTypeArray2int(this.StreamID)};`\r\n    }\r\n\r\n    hexTypeArray2int(typeArr) {\r\n        const arr = []\r\n        typeArr.forEach(n => {\r\n            arr.push(n.toString(16).length == 1 ? '0' + n.toString(16) : n.toString(16))\r\n        })\r\n        return parseInt(arr.join(''), 16)\r\n    }\r\n}\n// CONCATENATED MODULE: ./src/flvparse.js\n\r\nclass flvparse_FlvParse {\r\n    constructor() {\r\n        this.tempUint8 = [];\r\n        this.arrTag = [];\r\n        this.index = 0;\r\n        this.tempArr = [];\r\n        this._hasAudio = false;\r\n        this._hasVideo = false;\r\n    }\r\n\r\n    setFlv(uint8) {\r\n        this.stop = false;\r\n        this.arrTag = [];\r\n        this.index = 0;\r\n        this.tempUint8 = uint8;\r\n        if (this.tempUint8.length > 13 && this.tempUint8[0] == 70 && this.tempUint8[1] == 76 && this.tempUint8[2] == 86) {\r\n            this.probe(this.tempUint8.buffer);\r\n            this.read(9); // 略掉9个字节的flv header tag\r\n            this.read(4); // 略掉第一个4字节的 tag size\r\n            this.parse();\r\n            this.frist = false;\r\n            return this.offset;\r\n        } else if (!this.frist) {\r\n            return this.parse();\r\n        } else {\r\n            return this.offset;\r\n        }\r\n    }\r\n\r\n    probe(buffer) {\r\n        const data = new Uint8Array(buffer);\r\n        const mismatch = { match: false };\r\n\r\n        if (data[0] !== 0x46 || data[1] !== 0x4C || data[2] !== 0x56 || data[3] !== 0x01) {\r\n            return mismatch;\r\n        }\r\n\r\n        const hasAudio = ((data[4] & 4) >>> 2) !== 0;\r\n        const hasVideo = (data[4] & 1) !== 0;\r\n\r\n        if (!hasAudio && !hasVideo) {\r\n            return mismatch;\r\n        }\r\n        this._hasAudio = hasAudio;\r\n        this._hasVideo = hasVideo;\r\n        return {\r\n            match: true,\r\n            hasAudioTrack: hasAudio,\r\n            hasVideoTrack: hasVideo\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 开始解析\r\n     */\r\n    parse() {\r\n\r\n        while (this.index < this.tempUint8.length && !this.stop) {\r\n            this.offset = this.index;\r\n\r\n            const t = new FlvTag();\r\n            if (this.tempUint8.length - this.index >= 11) {\r\n                t.tagType = (this.read(1)[0]); // 取出tag类型\r\n                t.dataSize = this.read(3); // 取出包体大小\r\n                t.Timestamp = this.read(4); // 取出解码时间\r\n                t.StreamID = this.read(3); // 取出stream id\r\n            } else {\r\n                this.stop = true;\r\n                continue;\r\n            }\r\n            if (this.tempUint8.length - this.index >= (this.getBodySum(t.dataSize) + 4)) {\r\n\r\n                t.body = this.read(this.getBodySum(t.dataSize)); // 取出body\r\n                if (t.tagType == 9 && this._hasVideo) {\r\n                    this.arrTag.push(t);\r\n                }\r\n                if (t.tagType == 8 && this._hasAudio) {\r\n                    this.arrTag.push(t);\r\n                }\r\n                if (t.tagType == 18) {\r\n                    if (this.arrTag.length == 0)\r\n                        this.arrTag.push(t);\r\n                    else {\r\n                        console.log('这是截获的自定义数据', t);\r\n                    }\r\n                }\r\n                t.size = this.read(4);\r\n            } else {\r\n                this.stop = true;\r\n                continue;\r\n            }\r\n            this.offset = this.index;\r\n        }\r\n\r\n        return this.offset;\r\n    }\r\n    read(length) {\r\n        // let u8a = new Uint8Array(length);\r\n        // u8a.set(this.tempUint8.subarray(this.index, this.index + length), 0);\r\n        const u8a = this.tempUint8.slice(this.index, this.index + length);\r\n        this.index += length;\r\n        return u8a;\r\n    }\r\n\r\n    getBodySum(arr) {\r\n        let _str = '';\r\n        _str += (arr[0].toString(16).length == 1 ? '0' + arr[0].toString(16) : arr[0].toString(16));\r\n        _str += (arr[1].toString(16).length == 1 ? '0' + arr[1].toString(16) : arr[1].toString(16));\r\n        _str += (arr[2].toString(16).length == 1 ? '0' + arr[2].toString(16) : arr[2].toString(16));\r\n        return parseInt(_str, 16);\r\n    }\r\n\r\n    toString() {\r\n        for (let index = 0; index < this.arrTag.length; index++) {\r\n            console.log(`tag${index}`, this.arrTag[index].toString());\r\n        }\r\n    };\r\n}\r\n\r\n/* harmony default export */ var flvparse = (new flvparse_FlvParse());\r\n\n// CONCATENATED MODULE: ./src/utils/decodeUTF8.js\n/* eslint-disable */\r\nfunction decodeUTF8(uint8array) {\r\n    const out = [];\r\n    const input = uint8array;\r\n    let i = 0;\r\n    const length = uint8array.length;\r\n\r\n    while (i < length) {\r\n        if (input[i] < 0x80) {\r\n            out.push(String.fromCharCode(input[i]));\r\n            ++i;\r\n            continue;\r\n        } else if (input[i] < 0xC0) {\r\n            // fallthrough\r\n        } else if (input[i] < 0xE0) {\r\n            if (checkContinuation(input, i, 1)) {\r\n                const ucs4 = (input[i] & 0x1F) << 6 | (input[i + 1] & 0x3F);\r\n                if (ucs4 >= 0x80) {\r\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\r\n                    i += 2;\r\n                    continue;\r\n                }\r\n            }\r\n        } else if (input[i] < 0xF0) {\r\n            if (checkContinuation(input, i, 2)) {\r\n                const ucs4 = (input[i] & 0xF) << 12 | (input[i + 1] & 0x3F) << 6 | input[i + 2] & 0x3F;\r\n                if (ucs4 >= 0x800 && (ucs4 & 0xF800) !== 0xD800) {\r\n                    out.push(String.fromCharCode(ucs4 & 0xFFFF));\r\n                    i += 3;\r\n                    continue;\r\n                }\r\n            }\r\n        } else if (input[i] < 0xF8) {\r\n            if (checkContinuation(input, i, 3)) {\r\n                let ucs4 = (input[i] & 0x7) << 18 | (input[i + 1] & 0x3F) << 12 |\r\n                    (input[i + 2] & 0x3F) << 6 | (input[i + 3] & 0x3F);\r\n                if (ucs4 > 0x10000 && ucs4 < 0x110000) {\r\n                    ucs4 -= 0x10000;\r\n                    out.push(String.fromCharCode((ucs4 >>> 10) | 0xD800));\r\n                    out.push(String.fromCharCode((ucs4 & 0x3FF) | 0xDC00));\r\n                    i += 4;\r\n                    continue;\r\n                }\r\n            }\r\n        }\r\n        out.push(String.fromCharCode(0xFFFD));\r\n        ++i;\r\n    }\r\n\r\n    return out.join('');\r\n}\r\n\r\nfunction checkContinuation(uint8array, start, checkLength) {\r\n    let array = uint8array;\r\n    if (start + checkLength < array.length) {\r\n        while (checkLength--) {\r\n            if ((array[++start] & 0xC0) !== 0x80)\r\n                return false;\r\n        }\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n/* harmony default export */ var utils_decodeUTF8 = (decodeUTF8);\n// CONCATENATED MODULE: ./src/flvDemux.js\n\r\nconst le = (function () {\r\n    const buf = new ArrayBuffer(2);\r\n    (new DataView(buf)).setInt16(0, 256, true); // little-endian write\r\n    return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\r\n})();\r\nclass flvDemux_flvDemux {\r\n    constructor() {\r\n    }\r\n\r\n    static parseMetaData(arr) {\r\n        const name = flvDemux_flvDemux.parseScript(arr, 0);\r\n        const value = flvDemux_flvDemux.parseScript(arr, name.size, arr.length - name.size);\r\n        // return {}\r\n        const data = {};\r\n        data[name.data] = value.data;\r\n        return data;\r\n    }\r\n    static parseVariable(arrayBuffer, dataOffset, dataSize) {\r\n        return flvDemux_flvDemux.parseObject(arrayBuffer, dataOffset, dataSize);\r\n    }\r\n    static parseObject(arrayBuffer, dataOffset, dataSize) {\r\n\r\n        const name = flvDemux_flvDemux.parseString(arrayBuffer, dataOffset, dataSize);\r\n        const value = flvDemux_flvDemux.parseScript(arrayBuffer, dataOffset + name.size);\r\n        const isObjectEnd = value.objectEnd;\r\n\r\n        return {\r\n            data: {\r\n                name: name.data,\r\n                value: value.data\r\n            },\r\n            size: value.size,\r\n            objectEnd: isObjectEnd\r\n        };\r\n    }\r\n    static parseString(arrayBuffer, dataOffset, dataSize) {\r\n        const v = new DataView(arrayBuffer, dataOffset);\r\n        const length = v.getUint16(0, !le);\r\n        let str;\r\n        if (length > 0) {\r\n            str = utils_decodeUTF8(new Uint8Array(arrayBuffer, dataOffset + 2, length));\r\n        } else {\r\n            str = '';\r\n        }\r\n        return {\r\n            data: str,\r\n            size: 2 + length\r\n        };\r\n    }\r\n    static parseScript(arr, offset, dataSize) {\r\n        let dataOffset = offset;\r\n        const object = {};\r\n        const uint8 = new Uint8Array(arr);\r\n        const buffer = uint8.buffer;\r\n        const dv = new DataView(buffer, 0, dataSize);\r\n        let value = null;\r\n        let objectEnd = false;\r\n        const type = (dv.getUint8(dataOffset));\r\n        dataOffset += 1;\r\n\r\n        switch (type) {\r\n            case 0: // Number(Double) type\r\n                value = dv.getFloat64(dataOffset, !le);\r\n                dataOffset += 8;\r\n                break;\r\n            case 1:\r\n                { // Boolean type\r\n                    const b = dv.getUint8(dataOffset);\r\n                    value = !!b;\r\n                    dataOffset += 1;\r\n                    break;\r\n                }\r\n            case 2:\r\n                { // String type\r\n                    // dataOffset += 1;\r\n                    const amfstr = flvDemux_flvDemux.parseString(buffer, dataOffset);\r\n                    value = amfstr.data;\r\n                    dataOffset += amfstr.size;\r\n                    break;\r\n                }\r\n            case 3:\r\n                { // Object(s) type\r\n                    value = {};\r\n                    let terminal = 0; // workaround for malformed Objects which has missing ScriptDataObjectEnd\r\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\r\n                        terminal = 3;\r\n                    }\r\n                    while (dataOffset < dataSize - 4) { // 4 === type(UI8) + ScriptDataObjectEnd(UI24)\r\n                        const amfobj = flvDemux_flvDemux.parseObject(buffer, dataOffset, dataSize - offset - terminal);\r\n\r\n                        if (amfobj.objectEnd) { break; }\r\n                        value[amfobj.data.name] = amfobj.data.value;\r\n                        // dataOffset += amfobj.size;\r\n                        dataOffset = amfobj.size;\r\n                    }\r\n                    if (dataOffset <= dataSize - 3) {\r\n                        const marker = v.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\r\n                        if (marker === 9) {\r\n                            dataOffset += 3;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            case 8:\r\n                { // ECMA array type (Mixed array)\r\n                    value = {};\r\n                    // dataOffset += 1;\r\n                    dataOffset += 4; // ECMAArrayLength(UI32)\r\n                    let terminal = 0; // workaround for malformed MixedArrays which has missing ScriptDataObjectEnd\r\n                    if ((dv.getUint32(dataSize - 4, !le) & 0x00FFFFFF) === 9) {\r\n                        terminal = 3;\r\n                    }\r\n                    while (dataOffset < dataSize - 8) { // 8 === type(UI8) + ECMAArrayLength(UI32) + ScriptDataVariableEnd(UI24)\r\n                        const amfvar = flvDemux_flvDemux.parseVariable(buffer, dataOffset);\r\n\r\n                        if (amfvar.objectEnd) { break; }\r\n                        value[amfvar.data.name] = amfvar.data.value;\r\n                        dataOffset = amfvar.size;\r\n                    }\r\n                    if (dataOffset <= dataSize - 3) {\r\n                        const marker = dv.getUint32(dataOffset - 1, !le) & 0x00FFFFFF;\r\n                        if (marker === 9) {\r\n                            dataOffset += 3;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            case 9: // ScriptDataObjectEnd\r\n                value = undefined;\r\n                dataOffset = 1;\r\n                objectEnd = true;\r\n                break;\r\n            case 10:\r\n                { // Strict array type\r\n                    // ScriptDataValue[n]. NOTE: according to video_file_format_spec_v10_1.pdf\r\n                    value = [];\r\n                    const strictArrayLength = dv.getUint32(dataOffset, !le);\r\n                    dataOffset += 4;\r\n                    for (let i = 0; i < strictArrayLength; i++) {\r\n                        const val = flvDemux_flvDemux.parseScript(buffer, dataOffset);\r\n                        value.push(val.data);\r\n                        dataOffset = val.size;\r\n                    }\r\n                    break;\r\n                }\r\n            case 11:\r\n                { // Date type\r\n                    const date = flvDemux_flvDemux.parseDate(buffer, dataOffset + 1, dataSize - 1);\r\n                    value = date.data;\r\n                    dataOffset += date.size;\r\n                    break;\r\n                }\r\n            case 12:\r\n                { // Long string type\r\n                    const amfLongStr = flvDemux_flvDemux.parseString(buffer, dataOffset + 1, dataSize - 1);\r\n                    value = amfLongStr.data;\r\n                    dataOffset += amfLongStr.size;\r\n                    break;\r\n                }\r\n            default:\r\n                // ignore and skip\r\n                dataOffset = dataSize;\r\n                console.log('AMF', 'Unsupported AMF value type ' + type);\r\n        }\r\n        return {\r\n            data: value,\r\n            size: dataOffset,\r\n        };\r\n    }\r\n}\n// CONCATENATED MODULE: ./src/media-info.js\nclass MediaInfo {\r\n\r\n    constructor() {\r\n        this.mimeType = null;\r\n        this.duration = null;\r\n\r\n        this.hasAudio = null;\r\n        this.hasVideo = null;\r\n        this.audioCodec = null;\r\n        this.videoCodec = null;\r\n        this.audioDataRate = null;\r\n        this.videoDataRate = null;\r\n\r\n        this.audioSampleRate = null;\r\n        this.audioChannelCount = null;\r\n\r\n        this.width = null;\r\n        this.height = null;\r\n        this.fps = null;\r\n        this.profile = null;\r\n        this.level = null;\r\n        this.chromaFormat = null;\r\n        this.sarNum = null;\r\n        this.sarDen = null;\r\n\r\n        this.metadata = null;\r\n        this.segments = null; // MediaInfo[]\r\n        this.segmentCount = null;\r\n        this.hasKeyframesIndex = null;\r\n        this.keyframesIndex = null;\r\n    }\r\n\r\n    isComplete() {\r\n        const audioInfoComplete = (this.hasAudio === false) ||\r\n            (this.hasAudio === true &&\r\n                this.audioCodec != null &&\r\n                this.audioSampleRate != null &&\r\n                this.audioChannelCount != null);\r\n\r\n        const videoInfoComplete = (this.hasVideo === false) ||\r\n            (this.hasVideo === true &&\r\n                this.videoCodec != null &&\r\n                this.width != null &&\r\n                this.height != null &&\r\n                this.fps != null &&\r\n                this.profile != null &&\r\n                this.level != null &&\r\n                this.chromaFormat != null &&\r\n                this.sarNum != null &&\r\n                this.sarDen != null);\r\n\r\n        // keyframesIndex may not be present\r\n        return this.mimeType != null &&\r\n            this.duration != null &&\r\n            this.metadata != null &&\r\n            this.hasKeyframesIndex != null &&\r\n            audioInfoComplete &&\r\n            videoInfoComplete;\r\n    }\r\n\r\n    isSeekable() {\r\n        return this.hasKeyframesIndex === true;\r\n    }\r\n}\r\n\r\n/* harmony default export */ var media_info = (MediaInfo);\n// CONCATENATED MODULE: ./src/tagdemux.js\n\r\n\r\nclass tagdemux_tagDemux {\r\n\r\n    constructor() {\r\n        this.TAG = this.constructor.name;\r\n\r\n        this._config = {};\r\n\r\n        this._onError = null;\r\n        this._onMediaInfo = null;\r\n        this._onTrackMetadata = null;\r\n        this._onDataAvailable = null;\r\n\r\n        this._dataOffset = 0;\r\n        this._firstParse = true;\r\n        this._dispatch = false;\r\n\r\n        this._hasAudio = false;\r\n        this._hasVideo = false;\r\n\r\n        this._audioInitialMetadataDispatched = false;\r\n        this._videoInitialMetadataDispatched = false;\r\n\r\n        this._mediaInfo = new media_info();\r\n        this._mediaInfo.hasAudio = this._hasAudio;\r\n        this._mediaInfo.hasVideo = this._hasVideo;\r\n        this._metadata = null;\r\n        this._audioMetadata = null;\r\n        this._videoMetadata = null;\r\n\r\n        this._naluLengthSize = 4;\r\n        this._timestampBase = 0; // int32, in milliseconds\r\n        this._timescale = 1000;\r\n        this._duration = 0; // int32, in milliseconds\r\n        this._durationOverrided = false;\r\n        this._referenceFrameRate = {\r\n            fixed: true,\r\n            fps: 23.976,\r\n            fps_num: 23976,\r\n            fps_den: 1000\r\n        };\r\n\r\n        this._videoTrack = { type: 'video', id: 1, sequenceNumber: 0, addcoefficient: 2, samples: [], length: 0 };\r\n        this._audioTrack = { type: 'audio', id: 2, sequenceNumber: 1, addcoefficient: 2, samples: [], length: 0 };\r\n\r\n        this._littleEndian = (function () {\r\n            const buf = new ArrayBuffer(2);\r\n            (new DataView(buf)).setInt16(0, 256, true); // little-endian write\r\n            return (new Int16Array(buf))[0] === 256; // platform-spec read, if equal then LE\r\n        })();\r\n    }\r\n\r\n    moof(tags) {\r\n        for (let i = 0; i < tags.length; i++) {\r\n            this.parseChunks(tags[i]);\r\n        }\r\n\r\n    }\r\n\r\n    parseChunks(flvtag) {\r\n\r\n        switch (flvtag.tagType) {\r\n            case 18: // ScriptDataObject\r\n                this.parseMetadata(flvtag.body);\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseMetadata(arr) {\r\n        const data = flvDemux_flvDemux.parseMetaData(arr);\r\n        this._parseScriptData(data);\r\n\r\n        console.log(this._mediaInfo, this._mediaInfo.isComplete());\r\n    }\r\n\r\n    _parseScriptData(obj) {\r\n        const scriptData = obj;\r\n\r\n        if (scriptData.hasOwnProperty('onMetaData')) {\r\n            if (this._metaData) {\r\n                console.log('found another onMetaData tag!');\r\n            }\r\n\r\n            this._metaData = scriptData;\r\n\r\n            const onMetaData = this._metaData.onMetaData;\r\n\r\n            if (typeof onMetaData.hasAudio == \"boolean\") {\r\n                this._hasAudio = onMetaData.hasAudio;\r\n                this._mediaInfo.hasAudio = this._hasAudio;\r\n            }\r\n\r\n            if (typeof onMetaData.hasVideo == \"boolean\") {\r\n                this._hasVideo = onMetaData.hasVideo;\r\n                this._mediaInfo.hasVideo = this._hasVideo;\r\n            }\r\n\r\n            if (typeof onMetaData.audiodatarate == 'number') {\r\n                this._mediaInfo.audiodatarate = onMetaData.audiodatarate;\r\n            }\r\n            if (typeof onMetaData.videodatarate == 'number') {\r\n                this._mediaInfo.videodatarate = onMetaData.videodatarate;\r\n            }\r\n\r\n            if (typeof onMetaData.width == 'number') {\r\n                this._mediaInfo.width = onMetaData.width;\r\n            }\r\n            if (typeof onMetaData.height == 'number') {\r\n                this._mediaInfo.height = onMetaData.height;\r\n            }\r\n\r\n            if (typeof onMetaData.duration == 'number') {\r\n                if (!this._durationOverrided) {\r\n                    const duration = Math.floor(onMetaData.duration * this._timescale);\r\n                    this._duration = duration;\r\n                    this._mediaInfo.duration = duration;\r\n                }\r\n            } else {\r\n                this._mediaInfo.duration = 0;\r\n            }\r\n\r\n            if (typeof onMetaData.framerate == 'number') {\r\n                const fps_num = Math.floor(onMetaData.framerate * 1000);\r\n                if (fps_num > 0) {\r\n                    const fps = fps_num / 1000;\r\n                    this._referenceFrameRate.fixed = true;\r\n                    this._referenceFrameRate.fps = fps;\r\n                    this._referenceFrameRate.fps_num = fps_num;\r\n                    this._referenceFrameRate.fps_den = 1000;\r\n                    this._mediaInfo.fps = fps;\r\n                }\r\n            }\r\n\r\n            if (typeof onMetaData.keyframes == 'number') {\r\n                this._mediaInfo.hasKeyframesIndex = true;\r\n                const keyframes = onMetaData.keyframes;\r\n                keyframes.times = onMetaData.times;\r\n                keyframes.filepositions = onMetaData.filepositions;\r\n                this._mediaInfo.keyframesIndex = this._parseKeyframesIndex(keyframes);\r\n                onMetaData.keyframes = null; // keyframes has been extracted, remove it\r\n            } else {\r\n                this._mediaInfo.hasKeyframesIndex = false;\r\n            }\r\n\r\n            this._dispatch = false;\r\n\r\n            this._mediaInfo.metadata = onMetaData;\r\n\r\n            return this._mediaInfo;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* harmony default export */ var tagdemux = (new tagdemux_tagDemux());\n// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\nvar dropbox = document.querySelector('body div');\r\n\r\ndropbox.addEventListener('dragover', function (e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n}, false);\r\n\r\ndropbox.addEventListener(\"drop\", function (e) {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n    var reader = new FileReader();\r\n    reader.addEventListener('load', processflv, false);\r\n    reader.readAsArrayBuffer(e.dataTransfer.files[0]);\r\n}, false);\r\n\r\nfunction processflv(e) {\r\n    var buffer = e.target.result;\r\n    var unit8 = new Uint8Array(buffer);\r\n    flvparse.setFlv(unit8);\r\n    if (flvparse.arrTag[0].type != 18) {\r\n        if (this.error) this.error(new Error('without metadata tag'));\r\n    }\r\n    if (flvparse.arrTag.length > 0) {\r\n        tagdemux.hasAudio = this.hasAudio = flvparse._hasAudio;\r\n        tagdemux.hasVideo = this.hasVideo = flvparse._hasVideo;\r\n        tagdemux.moof(flvparse.arrTag)\r\n    }\r\n\r\n}\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")}]);